#include "form/core/window_interface.nvgt"
#include "form/core/form.nvgt"
#include "form/core/accessibility_manager.nvgt"
#include "form/core/input_manager.nvgt"
#include "form/events/event.nvgt"

class WindowRootForm : Form {
    private Window@ owner_window;
    
    WindowRootForm(Window@ owner, const string& in name) {
        super(name);
        @owner_window = owner;
    }
    
    bool handle_event(Event@ event) override {
        owner_window.handle_window_event(event);
        return Form::handle_event(event);
    }
}

class Window : IWindow
{
    private WindowRootForm@ root_form;
    private AccessibilityManager@ accessibility_manager;
    private InputManager@ input_manager;
    private IControl@ focused_control;
    private IControl@ last_focused;
    private string title;
    private bool running = false;
    
    Window(const string& in title = "Window") {
        this.title = title;
        @root_form = WindowRootForm(this, title);
        @accessibility_manager = AccessibilityManager();
        @input_manager = InputManager();
        @focused_control = null;
        @last_focused = null;
        
        setup_default_keys();
    }
    
    void show() {
        running = true;
        show_window(title);
        
        speak(title + " window", true);
        
        set_focus_to_first();
        if (@focused_control is null) {
            speak("No focusable controls", true);
        }
    }
    
    void close() {
        running = false;
    }
    
    void run() {
        show();
        
        while (running) {
            wait(5);
            handle_input();
        }
    }
    
    bool is_running() { return running; }
    
    string get_title() { return title; }
    
    void set_title(const string& in t) { 
        title = t;
        root_form.set_name(t);
    }
    
    void add_control(IControl@ control) {
        root_form.add_child(control);
    }
    
    void remove_control(IControl@ control) {
        root_form.remove_child(control);
        if (@focused_control is @control) {
            @focused_control = null;
        }
    }
    
    private void handle_input() {
        input_manager.process_input(focused_control);
    }
    
    private void setup_default_keys() {
        input_manager.register_key(KEY_TAB, KeyHandler(this.handle_tab));
        input_manager.register_modifier_combo(KEY_TAB, true, false, false, KeyHandler(this.handle_shift_tab));
        
        input_manager.register_key(KEY_ESCAPE, KeyHandler(this.handle_escape));
        
        input_manager.register_key(KEY_F1, KeyHandler(this.handle_help));
    }
    
    private bool handle_tab(KeyEvent@ e) {
        bool handled = false;
        
        if (@focused_control !is null) {
            IControl@ current = focused_control;
            while (@current !is null && !handled) {
                handled = current.focus_next_child();
                @current = current.get_parent();
            }
        }
        
        if (!handled) {
            set_focus_to_first();
        }
        
        return true;
    }
    
    private bool handle_shift_tab(KeyEvent@ e) {
        bool handled = false;
        
        if (@focused_control !is null) {
            IControl@ current = focused_control;
            while (@current !is null && !handled) {
                handled = current.focus_previous_child();
                @current = current.get_parent();
            }
        }
        
        if (!handled) {
            set_focus_to_last();
        }
        
        return true;
    }
    
    private bool handle_escape(KeyEvent@ e) {
        close();
        return true;
    }
    
    private bool handle_help(KeyEvent@ e) {
        if (@focused_control !is null) {
            accessibility_manager.announce_help(focused_control);
        }
        return true;
    }
    
    
    private void set_focus_to_first() {
        for (uint i = 0; i < root_form.get_child_count(); i++) {
            if (root_form.set_focus_to_first_in(root_form.get_child_at(i))) {
                return;
            }
        }
    }
    
    private void set_focus_to_last() {
        for (int i = root_form.get_child_count() - 1; i >= 0; i--) {
            if (root_form.set_focus_to_last_in(root_form.get_child_at(i))) {
                return;
            }
        }
    }
    
    void handle_window_event(Event@ event) {
        if (event.type == EventType::FocusGained) {
            if (@last_focused !is null && @last_focused !is @event.source) {
                last_focused.set_focus(false);
            }
            @last_focused = event.source;
            @focused_control = event.source;
        } else if (event.type == EventType::FocusLost) {
            if (@focused_control is @event.source) {
                @focused_control = null;
            }
        }
        
        accessibility_manager.handle_event(event);
    }
}